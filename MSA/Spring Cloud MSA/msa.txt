
- 과거에는 HardWare 중심으로 개발
- 이후 클라우드 및 Anti-Fragile 개념이 생겨나면서, 확장성 및 안정성이 강화되었고, 지속적인 개선이 생기더라도 시스템을 탄력적으로 운영할 수 있게 됨
- **Anti-Fragile 의 특징**
    - Auto Scaling : 자동 확장성을 갖는다. 시스템을 구성하는 인스턴스를 서버 운영 상황에 따라 동적으로 조정
    - MicroService : 전체 서비스를 구축하고 있는 개별적인 모듈, 기능을 독립적으로 개발 및 배포하여 운영
    - Chaos Engineering : 시스템이 예상치못한 상황이 발생하여도 안정적인 서비스를 제공할 수 있도록 구축
    - Continious Deployment : 지속적인 통합, 지속적인 배포. MicroService를 구성하는 모든 Service에 대해 일일이 빌드 및 배포작업을 하는 것이 아닌 자동화된 파이프라인을 구축하여 자동화
- **Cloud Native Architecture** **의 특징**
    - 확장 가능한 아키텍처
        - 수평적 확장(스케일링)에 유연하며, 시스템의 부하를 분산
        (Scale-Up : 하드웨어의 사양을 높이는 작업 / Scale-Out : 인스턴스 추가)
    - 탄력적 아키텍처
        - 서비스 생성 - 빌드 - 배포에 대한 자동화 파이프라인을 구축하여 환경 변화에 대한 대응 시간 단축
    - 장애 격리
        - 분리되어 있는 마이크로 서비스는 장애가 터지거나 특정 서비스가 수정 혹은 배포되더라도 해당 기능 외 다른 서비스에는 영향을 주지 않음

## 🍎 Cloud Native Application

위 두 특징을 가지고 만들어졌고, 네가지의 특징을 가지고 있다.

- CI/CD
    - 지속적인 통합과 지속적인 배포
    - CI (Continuous Integration)
        - 형상관리의 개념을 뜻하기도 하고, 통합된 코드를 빌드 및 테스트하는 과정을 뜻하기도 함
        - Git > Commit > 빌드 > 테스트 > Merge (통합)
    - CD (Continuous Delivery / Continuous Deployment)
        - Continuous Delivery는 war와 같은 패키징 파일을 수작업으로 배포해야하는 반면 Continuous Deployment는 이와 같은 수작업까지 자동으로 배포
        - 자동화 개념도 중요하지만, 정상적인 시스템 운영이 가장 중요하기 때문에 어떠한 형태로 시스템에 적용할 지에 대한 고민도 필요함
        - 배포 방법 3가지
            - Rolling : 구 버전과 신규 버전을 하나씩 교체하면서 점진적으로 배포
            - Blue/Green : 구 버전에서 신규 버전으로 일제히 전환
            - Canary : 이전 버전과 신규 버전을 모두 배포하고 이전 버전과 신규 버전의 트래픽을 비율로 조정한 후 신규 버전으로 트래픽을 100% 전환
- DevOps
    - Deployment + Operation (개발 조직과 운영 조직의 통합)
    - 서비스 및 애플리케이션의 개선과 운영을 위해 지속적인 개발/테스트/통합/구축/모니터링을 위한 효율적인 자동화 구조
    - DevOps는 각 서비스 구조를 더 작은 단위로 분할할 수 있도록 함.
- Container 가상화
    - 로컬 환경에서 운영하는 것이 아니라 시스템을 클라우드 환경으로 이전하여 시스템 구축
    - Docker를 활용한 컨테이너는 각 Application 간 운영체제를 공유하기 때문에 이전 VM과 비교하여 가볍고 빠름